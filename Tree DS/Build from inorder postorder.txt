
TreeNode* rec(vector<int>&inorder, vector<int>&postorder, int i1, int i2, int p1, int p2){
    if (i1>=i2 || p1>=p2) return nullptr;
    
    TreeNode* root = new TreeNode(postorder[p2-1]);
    
    auto it = find(inorder.begin()+i1, inorder.begin()+i2, postorder[p2-1] );
    int diff = it - (inorder.begin()+i1);
    root->left = rec(inorder, postorder, i1, i1+diff, p1, p1+diff);
    root->right = rec(inorder, postorder, i1+diff+1, i2, p1+diff, p2-1 );
    
    return root;
}
TreeNode* Solution::buildTree(vector<int> &inorder, vector<int> &postorder) {
    int n= inorder.size();
    if(n == 0) return nullptr;
    unordered_map<int, int>umap;
   
    return rec(inorder, postorder, 0, n, 0, n);
}
