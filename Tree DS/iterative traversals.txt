for recursive traversal- 
push, left, right - pre
left, push, right - in
left, right, push - post

//Post Order
vector<int> Solution::postorderTraversal(TreeNode* root) {
    vector<int>result;
    stack<TreeNode*>s;
    s.push(root);
    
    TreeNode* temp = root;
    
    while(!s.empty()){
        temp = s.top();
        s.pop();
        result.push_back(temp->val);
        
        if(temp->left!=NULL) 
            s.push(temp->left);
            
        if(temp->right!=NULL) 
            s.push(temp->right);
    }
    reverse(result.begin(), result.end());
    return result;
}


//In-Order
vector<int> Solution::inorderTraversal(TreeNode* root) {
    vector<int> result;
    stack<TreeNode*> s;
    struct TreeNode* temp = root;
    
    while(true){
        while(temp){
            s.push(temp);
            temp=temp->left;
        }
        
        if(s.empty()) break;
        
        temp = s.top();
        
        s.pop();
        result.push_back(temp->val);
        temp= temp->right;
    }
    return result;
}

//Pre-order
vector<int> Solution::preorderTraversal(TreeNode* root) {
    vector<int> result;
    stack<TreeNode*> s;
    s.push(root);
    
    while(!s.empty()){
        struct TreeNode* temp = s.top();
        s.pop();
        if(temp!=NULL){
            int n = temp->val;
            result.push_back(n);
            s.push(temp->right);
            s.push(temp->left);
        }
    }
    return result;
}